---
- hosts: all

  vars_files:
    - ./vars/vault.yml
    - ./vars/vars.yml

  vars_prompt:
    - name: symfony_env
      prompt: "Enter the environment for your Symfony app (prod|dev|test)"
      default: prod
      private: no

  environment:
    SYMFONY_ENV: "{{ symfony_env|lower }}"

  pre_tasks:

    #roles:
      #- nginx

    - ping: ~

    - name: Convert entered Symfony environment to lowercase
      set_fact:
        symfony_env: "{{ symfony_env|lower }}"
      tags:
        - always

    - name: Update APT package manager repositories cache
      become: true
      apt:
        update_cache: yes

    - name: Upgrade installed packages
      become: true
      apt:
        upgrade: safe

  tasks:

    #- import_tasks: ./includes/playbook2.yml

    - name: Install Git VCS
      become: true
      apt:
        name: git
        state: latest

    - name: Add PHP 7 PPA repository
      become: true
      apt_repository:
        repo: 'ppa:ondrej/php'

    - name: Install nginx web server
      become: true
      apt:
        name: nginx
        state: latest
      notify: Restart Nginx

    # MySQL requirements
    - name: Set MySQL root password before installing
      become: true
      debconf: name='mysql-server' question='mysql-server/root_password' value='{{mysql_root_password}}' vtype='password'
      changed_when: false

    # MySQL requirements
    - name: Confirm MySQL root password before installing
      become: true
      debconf: name='mysql-server' question='mysql-server/root_password_again' value='{{mysql_root_password}}' vtype='password'
      changed_when: false

    - name: Install MySQL DB server
      become: true
      apt:
        name: mysql-server
        state: latest

    - name: Install PHP packages
      become: true
      apt:
        name:
          - php7.2-cli
          - php7.2-curl
          - php7.2-fpm
          - php7.2-intl
          - php7.2-mysql
          - php7.2-xml
        state: latest
      notify: Restart PHP-FPM

    - name: Set date.timezone for CLI
      become: true
      lineinfile:
        dest: /etc/php/7.2/cli/php.ini
        regexp: "date.timezone ="
        line: "date.timezone = UTC"

    - name: Set date.timezone for FPM
      become: true
      lineinfile:
        dest: /etc/php/7.2/fpm/php.ini
        regexp: "date.timezone ="
        line: "date.timezone = UTC"
      notify: Restart PHP-FPM

    - name: Create project directory and set its permissions
      become: true
      file:
        path: "{{ symfony_root_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        recurse: yes


    #- name: Remove Symfony directory
      #command: 'rm -r {{ symfony_root_dir }}'

    - name: Checkout Git repository
      git:
        repo: https://github.com/DurandSacha/Symfony-Snowtricks
        dest: "{{ symfony_root_dir }}"
        force: yes
        clone: yes
      register: repo_code

    - name: Register code_changed variable
      set_fact:
        code_changed: repo_code.changed

    - name: Install low-level utilities
      become: true
      apt:
        name:
          - zip
          - unzip

    - name: Fix var directory permissions
      file:
        path: "{{ symfony_var_dir }}"
        state: directory
        mode: 0777
        recurse: yes

    - name: Check for Composer
      stat:
        path: /usr/local/bin/composer
      register: composer_stat

    - name: Make sure composer is at its latest version
      composer:
        working_dir: "{{ symfony_root_dir }}"
        command: self-update
      register: composer_self_update
      changed_when: "not composer_self_update.stdout|search('You are already using composer version')"
      when: composer_stat.stat.exists

    - name: Download composer
      get_url:
        url: https://getcomposer.org/installer
        dest: "{{ installer }}"
      when: not composer_stat.stat.exists

    - name: Install composer
      command: "{{ item }}"
      with_items:
        - "php {{ installer }}"
        - mv composer.phar /usr/local/bin/composer
      notify: Restart Nginx
      when: not composer_stat.stat.exists

    - name: Set permissions on Composer
      become: true
      file:
        path: /usr/bin/composer
        mode: "a+x"
      when: not composer_stat.stat.exists

    - name: Install Composer's dependencies
      become: true
      composer:
        working_dir: "{{ symfony_root_dir }}"
        no_dev: no
      when: code_changed | bool

    - name: Add Symfony config template to the Apache available sites
      become: true
      template:
        src: templates/symfony.conf
        dest: "/etc/nginx/sites-available/{{ server_name }}.conf"
      notify: Restart Nginx

    #- name: rm default.conf ( added )
      #become: true
      #command: "rm /etc/nginx/sites-enabled/default"
      #notify: Restart Nginx

    - name: Enable Symfony config template from Nginx available sites
      become: true
      file:
        src: "/etc/nginx/sites-available/{{ server_name }}.conf"
        dest: "/etc/nginx/sites-enabled/{{ server_name }}.conf"
        state: link

    - name: Add enabled nginx site to /etc/hosts
      become: true
      lineinfile:
        dest: /etc/hosts
        regexp: "{{ server_name }}"
        line: "127.0.0.1 {{ server_name }}"

    - name: Add SQL connexion information in .env file ( with a new admin SQL User )
      become: true
      lineinfile:
        dest: "{{ symfony_root_dir }}/.env"
        regexp: ''
        insertafter: ''
        line: "DATABASE_URL=mysql://user1:{{ sql_pass }}@127.0.0.1:3306/snowtricks"


    - name: remove cache in var/cache
      command: 'rm -rf var/cache/*'

    - name: install acl package
      become: yes
      apt: pkg=acl

    - name: Set permissions on bin/console
      become: true
      file:
        path: "{{symfony_console_path}}"
        mode: "a+x"

    # Symfony console commands
    - name: Create DB if not exists
      command: '{{ symfony_console_path }} doctrine:database:create --if-not-exists --no-interaction'

    - name: Execute migrations
      command: '{{ symfony_console_path }} doctrine:migrations:migrate --no-interaction'
      when: code_changed

    - name: Load data fixtures
      command: '{{ symfony_console_path }} doctrine:fixtures:load --no-interaction'
      when: symfony_env != "prod"

    - name: Clear cache
      command: '{{ symfony_console_path }} cache:clear --env={{ symfony_env }}'
      changed_when: false
      when: code_changed

  handlers:

    - name: Restart Nginx
      become: true
      service:
        name: nginx
        state: restarted

    - name: Restart PHP-FPM
      become: true
      service:
        name: php7.2-fpm
        state: restarted